package textadventure;import java.awt.print.Book;import java.util.Calendar;import java.util.GregorianCalendar;import java.util.HashMap;import java.util.Scanner;import java.util.StringTokenizer;import command.Command;import items.Books;import items.CloseableContainer;import items.Closet;import items.Container;import items.GasMask;import items.Item;import items.Keys;import items.Lockpick;import items.Note;import items.Potion;import items.PotionVault;import items.Riddle;import items.Scenery;import items.UselessItem;import items.VendingMachine;import items.GraphingCalculator;public class World {	/*	 * Room String constants	 * 	 * Instead of hard-coding everywhere, room names are defined here. They're also	 * public and static so they can be accessed anywhere using World.stringName	 */	public static final String CS_CLASS = "CS CLASSROOM";	public static final String QUAD = "QUAD";	public static final String LIT_CLASS = "LIT CLASS";	public static final String SCIENCE_CLASS = "SCIENCE CLASS";	public static final String MATH_CLASS = "MATH CLASS";	/** Line word wrap length for console output */	public static final int LINE_WRAP_LENGTH = 70;	/* private World attributes */	/** The main player of the game, which is you */	private Player player;	/**	 * Keeps track of the Rooms in this World using <Key, Value> pairs of <RoomName,	 * RoomObject>	 */	private HashMap<String, Room> rooms;	/** Reads user input */	private static final Scanner IN = new Scanner(System.in);	/** Keeps track of time using built-in Java object */	private Calendar localTime;	long startMilliseconds;	/**	 * Create the game and initialize its internal map.	 */	public World() {		initializeNewGame();	}	public void initializeNewGame() {		// Initialize attributes		createRooms();		player = new Player(rooms.get(QUAD), this);		// Start game timer		localTime = new GregorianCalendar(2018, Calendar.AUGUST, 14, 6, 40, 0); // August 14, 2018 7:15 A.M.		startMilliseconds = System.currentTimeMillis();	}	/**	 * Print out the opening message for the player.	 */	private void printWelcome() {		print("WELCOME TO HIDDEN TREASURE!\n\n\n");		print("You are in the quad of Cupertino High School. Surrounding you are the school buildings. "				+ "You’re a student of Cupertino High School. You’ve heard that at your school, somewhere in the  "				+ "science labs is a mysterious potion that the chemistry teachers have been secretly developing. "				+ "This potion will allow you to become the best student possible: it will heighten your IQ, increase "				+ "your test scores, and decrease your procrastination. And most importantly, it will grant you"				+ " god-like coding abilities. However, this potion is heavily protected. It’s in a vault in demuth's science room."				+ " You’ll need three keys (gold, silver, and brass colored)  and a (String) password to open it. It’s currently 6:40AM. School starts at 7am, but students will start "				+ "arriving at the school by 6:55am. This means you have about 15 minutes left until "				+ "your teachers and students start arriving at the school. You must get your hands on this magic "				+ "potion before anyone sees you snooping around!" + "\n\n");		print("Welcome to Hidden Treasure!\n");		print("(c) 2018 By Kelly Ryoo\n");		print("Type 'help' if you need help.\n\n");		print(player.getCurrentRoom().getDescription());	}	/**	 * Create all the rooms and link their exits together.	 */	private void createRooms() {		// Create a new HashMap to store the rooms in		rooms = new HashMap<String, Room>();		// Create rooms and add them to our HashMap		rooms.put(QUAD, new Room(QUAD, "The quad is void of any people. There is a vending machine by the corner of the quad. There are some also black trash cans next to the streelight lamps. The floors are smooth, sleek and white. But really, it’s pretty empty.\n\n", this));		rooms.put(CS_CLASS, new Room(CS_CLASS, "This is Mr.Ferrante's classroom. Computers line the walls. There are gpdraw recursion and house graphics hung up on the walls. Inside the room are 6 groups of desks for students. Next to his desk is a gray cabinet. \n\n", this));		rooms.put(LIT_CLASS, new Room(LIT_CLASS, "The room smells like caramel and pumpkin spice. On top of a brown_cabinet are stacks of famous literary works. On top of the counter to your left are four books. They are labeled as 'class copies, do not take.' \n\n", this));		rooms.put(SCIENCE_CLASS, new Room(SCIENCE_CLASS, "Inside, you can see a large, periodic table poster by the right wall. There are numerous test tubes and beakers on the shelves. There are tall, wide black lab tables spread out across the room. It smells acidic and pugnent- the students must have been doing a chemistry lab yesterday. There are also jars of chemicals by the front desk.\n\n", this));		rooms.put(MATH_CLASS, new Room(MATH_CLASS, "The room is full of desks, all neatly organized in rows. Ms. Demetriou's desk is at the right corner, and there are stacks of graded math tests and a jar full of purple pens- her favorite color. Class copies of Calculus BC textbooks fill the shelves to your left. There's also an opened, blue container next to you, labeled as 'graphing calculators- for class usage'.\n\n", this));		// Define room exits.  Order is north, east, south, west		rooms.get(QUAD).setExits(rooms.get(CS_CLASS), rooms.get(MATH_CLASS), rooms.get(LIT_CLASS), rooms.get(SCIENCE_CLASS));		rooms.get(LIT_CLASS).setExits(rooms.get(QUAD), null, null, null);		rooms.get(MATH_CLASS).setExits(null, null, null, rooms.get(QUAD));		rooms.get(SCIENCE_CLASS).setExits(null, rooms.get(QUAD), null, null);		rooms.get(CS_CLASS).setExits(null, null, rooms.get(QUAD), null);		// Create game items and add them to rooms				//ADD TO QUAD		CloseableContainer box = new CloseableContainer(this, "box","A plain, brown box.", false);		Note note = new Note(this, "note", Item.TAKEABLE, "A small piece of paper. It seems to have some scribbles written on it");		box.addItem(note);		rooms.get(QUAD).addItem(box);				VendingMachine vending_machine = new VendingMachine(this, "vending_machine",Item.NOT_TAKEABLE, "The vending machine is full of lots of snacks, including chips and candy. On one of the candy rows is a shiny brass-colored key.");		Keys brass_key = new Keys(this, "brass_key", Item.TAKEABLE, "A brass-colored shiny key. It's dark brown at the edges, as if it's rusted over time.");		vending_machine.addItem(brass_key);		rooms.get(QUAD).addItem(vending_machine);				//ADD TO LIT CLASS		CloseableContainer vault = new CloseableContainer(this, "brown_cabinet", "It's a small, metal, brown cabinet.", false);		Keys silver_key = new Keys(this, "silver_key", Item.TAKEABLE, "A slightly dirtied, silver key. There is also an engraved cursive ‘S’.");		vault.addItem(silver_key);		Note clue = new Note(this, "clue", Item.TAKEABLE, "A a small, white piece of paper with some writing on it.");		vault.addItem(clue);		rooms.get(LIT_CLASS).addItem(vault);		rooms.get(LIT_CLASS).addItem(new Books(this, "198ONE", Item.NOT_TAKEABLE, "A copy of the George Orwell classic 1981. When you look closely, someone annotated on the side: 'to_learn'.\n"));		rooms.get(LIT_CLASS).addItem(new Books(this, "Fahrenheit_FOUR51", Item.NOT_TAKEABLE, "A copy of 9th grade lit/write novel Fahrenheit 451 by Ray Bradbury. When you look closely, someone annotated on the side: 'to_grow'.\n"));		rooms.get(LIT_CLASS).addItem(new Books(this, "A_Tale_Of_TWO_Cities", Item.NOT_TAKEABLE, "A copy of the old classic A Tale Of 2 Cities. When you look closely, someone annotated on the side: 'is_to'.\n"));				//FERRANTES CLASS		Riddle riddle = new Riddle(this, "riddle", Item.NOT_TAKEABLE, "An electronic panel that is hanging on a blue door. It displays in bold, green letters: 'the door to your north is the door to the cs classroom. If you are able to solve this riddle, that door will unlock. The riddle reads:\n\"After the last statement has been executed, how many objects are now accessible?\n" + 				"String straA = new String(\"Cheese\")\n" + 				"String strB = strA;\n" + 				"String strC = strA;\n" + 				"String strD = strA;\n" + 				"String strE = strA;\n" + 				"Options:\n" + 				"one, two, three, four, five\n\n" + 				"Think carefully! You have two chances!\n" + 				"Make Mr. Ferrante proud. :) \n" + "HINT: Once you decide on an answer you should: enter [the answer] into riddle.");		rooms.get(QUAD).addItem(riddle);		CloseableContainer small_cabinet = new CloseableContainer(this, "small_cabinet", "A gray, small_cabinet.", false);		rooms.get(CS_CLASS).addItem(small_cabinet);		Lockpick lockpick = new Lockpick(this, "lockpick", true, "A silver, slim lockpick");		rooms.get(CS_CLASS).addItem(lockpick);		UselessItem mad_gab = new UselessItem(this, "mad_gab", UselessItem.NOT_TAKEABLE, "A pack of cards in an orange box labeled (in a blue, bold font) as 'mad_gab'.");		UselessItem computer = new UselessItem(this, "computer", UselessItem.NOT_TAKEABLE, "Mr.Ferrante's school laptop.");		rooms.get(CS_CLASS).addItem(mad_gab);		small_cabinet.addItem(computer);		small_cabinet.addItem(clue);		 		//MATH CLASS		Keys gold_key = new Keys(this, "gold_key", Item.TAKEABLE, "It's a shiny, antique-looking gold key. There’s an elegant, cursive ‘S’ engraved into its handle.");		rooms.get(MATH_CLASS).addItem(gold_key);		GraphingCalculator graphing_calculator = new GraphingCalculator(this, "graphing_calculator", Item.TAKEABLE, "It’s a white, sleek TI-84 graphing calculator.");		rooms.get(MATH_CLASS).addItem(graphing_calculator);		Closet closet = new Closet(this, "closet", Item.NOT_TAKEABLE, "An antique, dark brown cabinet-resembling closet. It's where Ms. Demetriou says she keeps some extra workbooks... but who really knows?");		rooms.get(MATH_CLASS).addItem(closet);		GasMask gas_mask = new GasMask(this, "gas_mask", Item.TAKEABLE, "A white, gas mask");		closet.addItem(gas_mask);				//SCIENCE CLASSES		PotionVault potion_vault = new PotionVault(this, "potion_vault", Item.NOT_TAKEABLE, "A clear, cube-shaped vault. You note that the vault is made of some see-through, iridescent material, rather than plain steel. On the top of the vault is a keyboard that lights up when you touch it. By the left side of the vault are three keyholes. Each keyhole is painted in a different color, ordered (from top to bottom) as: gold, silver, and a brass, brown-like color. When you try and smash the vault with different materials, one thing is clear: it's virtually unbreakable.");		rooms.get(SCIENCE_CLASS).addItem(potion_vault);		Potion potion = new Potion(this, "potion", Item.TAKEABLE, "A glass vial of purple liquid. It seems to change color in the light, shimmering and shining in different hues of blue and purple. Some of the chemicals and alkalines continue to bubble inside the vial.");		potion_vault.addItem(potion);	}	public Room getRoom(String key) {		return rooms.get(key);	}	public Player getPlayer() {		return player;	}	/**	 * Main play routine. Loops until end of play.	 */	public void play() {		printWelcome();		updateTime();		// Enter the main command loop. Here we repeatedly read commands and		// execute them until the game is over.		boolean finished = false;		while (!finished) {			System.out.print("> "); // print prompt			String command = IN.nextLine();			finished = processCommand(command);			finished = finished ? true : updateTime(); // Remove this line if you don't need time in your game		}		print("\nThank you for playing!  Good bye!\n\n");	}	/**	 * Updates and prints out the current game time. Every second spent between game	 * commands becomes a second spent within the game.	 */	private boolean updateTime() {		long endMilliseconds = System.currentTimeMillis();		localTime.add(Calendar.SECOND, (int) ((endMilliseconds - startMilliseconds) / 1000));		int hour = localTime.get(Calendar.HOUR_OF_DAY);		int minute = localTime.get(Calendar.MINUTE);		int second = localTime.get(Calendar.SECOND);		startMilliseconds = endMilliseconds;		System.out.printf("The time is %d:%02d:%02d A.M.\n\n", hour, minute, second);		if (localTime.get(Calendar.MINUTE) >= 55) {			print("Ack! The students are coming to school!! You LOSE!\n\n");			return true;		}		return false;	}	/**	 * Given a command, process (that is: execute) the command. If this command ends	 * the game, true is returned, otherwise false is returned.	 */	private boolean processCommand(String command) {		StringTokenizer tok = new StringTokenizer(command);		if (tok.hasMoreTokens()) {			if (tok.nextToken().equals("quit"))				return true;			else if (!Command.hasValidCommandWord(command)) {				print("I don't know the command '" + command + "'\n\n");				return false;			} else {				Command.doCommand(command, this);				return false;			}		} else {			print("Please type in a command" + "\n\n");			return false;		}	}	/**	 * Helper method to print any String in a line-wrapped format. Prints the input	 * String line-wrapped to a column width of LINE_WRAP_LENGTH, which is a	 * constant defined at the top of this class.	 * 	 * Pseudocode and strategy: There are so many special cases, I could not have	 * written this without planning it out. I decided to leave the comments here so	 * you can see the strategy. - Mr. Ferrante	 * 	 * while(length of str >= lengthLimit) Find the first occurrence of \n. If it's	 * < lengthLimit then add substring(0, occurrence + 1) to output and reduce str	 * by same amount. Else if there's a space at lengthLimit then add substring(0,	 * lengthLimit) to output and reduce str by same amount Else find last	 * occurrence of space within substring(0, lengthLimit) If no space anywhere	 * then If there's a space at least somewhere in str, then add substring(0,	 * firstSpace) to output and reduce str by same amount Else (no space anywhere)	 * add rest of str to output and reduce by same amount Else (space somewhere	 * within substring) add str.substring(0, index of last space) to output reduce	 * str by same amount If there's anything left in str, add it.	 */	public static void print(String str) {		String output = "";		while (str.length() >= LINE_WRAP_LENGTH) {			int lineBreakIndex = str.indexOf("\n");			if (lineBreakIndex < LINE_WRAP_LENGTH && lineBreakIndex != -1) {				output += str.substring(0, lineBreakIndex + 1);				str = str.substring(lineBreakIndex + 1);			} else if (str.charAt(LINE_WRAP_LENGTH) == ' ') {				output += str.substring(0, LINE_WRAP_LENGTH);				str = str.substring(LINE_WRAP_LENGTH + 1);				if (str.length() > 0)					output += "\n";			} else {				int lastSpaceIndex = str.substring(0, LINE_WRAP_LENGTH).lastIndexOf(" ");				if (lastSpaceIndex == -1) {					int firstSpaceIndex = str.indexOf(" ");					if (firstSpaceIndex != -1) {						output += str.substring(0, firstSpaceIndex);						str = str.substring(firstSpaceIndex + 1);						if (str.length() > 0)							output += "\n";					} else {						output += str;						str = "";					}				} else {					output += str.substring(0, lastSpaceIndex);					str = str.substring(lastSpaceIndex + 1);					if (str.length() > 0)						output += "\n";				}			}		}		if (str.length() > 0) {			output += str;		}		System.out.print(output);	}}